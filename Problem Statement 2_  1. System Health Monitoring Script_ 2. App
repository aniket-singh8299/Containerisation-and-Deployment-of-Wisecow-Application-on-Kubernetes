Objective 1: System Health Monitoring Script
The following Python script monitors CPU usage, memory usage, disk space, and running processes. If any of these metrics exceed predefined thresholds, the script logs an alert.

----------
import psutil
import logging
from datetime import datetime

# Configure logging
logging.basicConfig(filename='system_health.log', level=logging.INFO, format='%(asctime)s - %(message)s')

# Thresholds
CPU_THRESHOLD = 80.0
MEMORY_THRESHOLD = 80.0
DISK_THRESHOLD = 90.0

def check_cpu_usage():
    cpu_usage = psutil.cpu_percent(interval=1)
    if cpu_usage > CPU_THRESHOLD:
        logging.warning(f'High CPU usage detected: {cpu_usage}%')
    return cpu_usage

def check_memory_usage():
    memory = psutil.virtual_memory()
    memory_usage = memory.percent
    if memory_usage > MEMORY_THRESHOLD:
        logging.warning(f'High Memory usage detected: {memory_usage}%')
    return memory_usage

def check_disk_usage():
    disk = psutil.disk_usage('/')
    disk_usage = disk.percent
    if disk_usage > DISK_THRESHOLD:
        logging.warning(f'High Disk usage detected: {disk_usage}%')
    return disk_usage

def check_running_processes():
    processes = [proc.info for proc in psutil.process_iter(['pid', 'name', 'username'])]
    return processes

def log_system_health():
    cpu_usage = check_cpu_usage()
    memory_usage = check_memory_usage()
    disk_usage = check_disk_usage()
    processes = check_running_processes()

    logging.info(f'CPU Usage: {cpu_usage}%')
    logging.info(f'Memory Usage: {memory_usage}%')
    logging.info(f'Disk Usage: {disk_usage}%')
    logging.info(f'Running Processes: {len(processes)}')

if __name__ == "__main__":
    log_system_health()

-------------------------------------------------------------------------------------------------
Objective 2: Automated Backup Solution
The following Python script automates the backup of a specified directory to a remote server using rsync over SSH. The script logs the success or failure of the backup operation.

python

----------------------------------------------------------------------------------------------------



import subprocess
import logging
import os
from datetime import datetime

# Configure logging
logging.basicConfig(filename='backup.log', level=logging.INFO, format='%(asctime)s - %(message)s')

# Backup configuration
SOURCE_DIR = '/path/to/source/directory'
REMOTE_USER = 'remote_user'
REMOTE_HOST = 'remote_host'
REMOTE_DIR = '/path/to/remote/directory'
SSH_KEY = '/path/to/ssh/key'

def backup_directory():
    timestamp = datetime.now().strftime('%Y%m%d%H%M%S')
    backup_cmd = [
        'rsync',
        '-avz',
        '-e', f'ssh -i {SSH_KEY}',
        SOURCE_DIR,
        f'{REMOTE_USER}@{REMOTE_HOST}:{REMOTE_DIR}/{timestamp}'
    ]

    try:
        subprocess.check_output(backup_cmd, stderr=subprocess.STDOUT)
        logging.info('Backup completed successfully.')
    except subprocess.CalledProcessError as e:
        logging.error(f'Backup failed: {e.output.decode()}')

if __name__ == "__main__":
    backup_directory()
